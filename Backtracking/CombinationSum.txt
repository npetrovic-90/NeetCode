using System;
using System.Collections.Generic;

namespace CodeInterview
{
	//	39. Combination Sum
	//Medium

	//12197

	//255

	//Add to List

	//Share
	//Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target.You may return the combinations in any order.

	//The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

	//It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.



	//Example 1:


	//Input: candidates = [2, 3, 6, 7], target = 7
	//Output: [[2,2,3], [7]]
	//Explanation:
	//2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
	//7 is a candidate, and 7 = 7.
	//These are the only two combinations.







	class Problem
	{
		public List<List<int>> combinationSum(int[] nums, int target)
		{
			List<List<int>> result = new List<List<int>>();
			List<int> list = new List<int>();
			Array.Sort(nums);
			backtrack(result, 0, nums, target, list);

			return result;


		}

		private void backtrack(List<List<int>> result, int start, int[] nums, int target, List<int> list)
		{
			if (target == 0)
			{
				result.Add(new List<int>(list));
				return;
			}

			for (int i = start; i < nums.Length && target >= nums[i]; i++)
			{
				list.Add(nums[i]);
				backtrack(result, i, nums, target - nums[i], list);
				list.RemoveAt(list.Count - 1);
			}

		}
		


	}

	class Program
	{
		static void Main(string[] args)
		{


			Problem prob = new Problem();

			List<List<int>> result = prob.combinationSum(new int[] { 2, 3, 6, 7 }, 7);

			foreach (List<int> list in result)
			{
				Console.Write("[");
				foreach (int num in list)
					Console.Write(num + ",");
				Console.Write("]\n");
			}







		}
	}
}
