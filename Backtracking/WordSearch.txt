using System;

namespace CodeInterview
{
	//	79. Word Search
	//Medium

	//10164

	//386

	//Add to List

	//Share
	//Given an m x n grid of characters board and a string word, return true if word exists in the grid.

	//The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.



	//Example 1:


	//Input: board = [["A", "B", "C", "E"], ["S","F","C","S"], ["A","D","E","E"]], word = "ABCCED"







	class Problem
	{
		public bool exist(char[,] board, string word)
		{
			int row = board.GetLength(0);
			int column = board.GetLength(1);

			for (int i = 0; i < row; i++)
				for (int j = 0; j < column; j++)
				{
					if (board[i, j] == word[0])
					{
						if (dfs(board, word, 0, i, j, row, column))
							return true;
					}
				}

			return false;
		}

		private bool dfs(char[,] board, string word, int index, int i, int j, int row, int column)
		{


			if (i < 0 || i >= row || j < 0 || j >= column || board[i, j] != word[index])
				return false;

			if (index == word.Length - 1)
				return true;

			if (dfs(board, word, index + 1, i, j + 1, row, column) ||
				dfs(board, word, index + 1, i, j - 1, row, column) ||
				dfs(board, word, index + 1, i + 1, j, row, column) ||
				dfs(board, word, index + 1, i - 1, j, row, column))
			{
				return true;
			}

			return false;
		}
	}





	class Program
	{
		static void Main(string[] args)
		{


			Problem prob = new Problem();
			char[,] arr = { { 'A', 'B', 'C', 'E' }, { 'S', 'F', 'C', 'S' }, { 'A', 'D', 'E', 'E' } };
			Console.WriteLine("Does the word exist:" + prob.exist(arr, "ABCCED"));









		}
	}
}