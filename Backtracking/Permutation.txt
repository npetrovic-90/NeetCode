using System;
using System.Collections.Generic;

namespace CodeInterview
{
	//	46. Permutations
	//Medium

	//11849

	//205

	//Add to List

	//Share
	//Given an array nums of distinct integers, return all the possible permutations.You can return the answer in any order.




	//Example 1:

	//Input: nums = [1, 2, 3]
	//Output: [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]







	class Problem
	{
		public List<List<int>> permute(int[] nums)
		{
			List<List<int>> result = new List<List<int>>();

			dfs(result, nums, 0);

			return result;


		}
		private void swap(int[] arr, int a, int b)
		{
			int tmp = arr[a];
			arr[a] = arr[b];
			arr[b] = tmp;
		}
		private void dfs(List<List<int>> result, int[] nums, int start)
		{
			if (start == nums.Length)
			{
				List<int> list = new List<int>();
				for (int i = 0; i < nums.Length; i++) list.Add(nums[i]);

				result.Add(list);

				return;

			}

			for (int i = start; i < nums.Length; i++)
			{
				swap(nums, start, i);
				dfs(result, nums, start + 1);
				swap(nums, start, i);
			}

		}



	}

	class Program
	{
		static void Main(string[] args)
		{


			Problem prob = new Problem();

			List<List<int>> result = prob.permute(new int[] { 1, 2, 3 });

			foreach (List<int> list in result)
			{
				Console.Write("[");
				foreach (int num in list)
					Console.Write(num + ",");
				Console.Write("]\n");
			}







		}
	}
}
