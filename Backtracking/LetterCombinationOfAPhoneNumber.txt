using System;
using System.Collections.Generic;

namespace CodeInterview
{
	//	17. Letter Combinations of a Phone Number
	//Medium

	//11658

	//730

	//Add to List

	//Share
	//Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.Return the answer in any order.

	//A mapping of digits to letters (just like on the telephone buttons) is given below.Note that 1 does not map to any letters.





	//Example 1:


	//Input: digits = "23"
	//Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]



	class Problem
	{

		public List<string> letterCombination(string digits)
		{
			List<string> result = new List<string>();


			if (digits.Length == 0) result.Add("[]");

			Dictionary<char, string> dict = new Dictionary<char, string>();

			dict.Add('2', "abc");
			dict.Add('3', "def");
			dict.Add('4', "ghi");
			dict.Add('5', "jkl");
			dict.Add('6', "mno");
			dict.Add('7', "pqrs");
			dict.Add('8', "tuv");
			dict.Add('9', "wxyz");


			string curr = "";

			dfs(result, curr, 0, digits, dict);

			return result;


		}

		private void dfs(List<string> result, string curr, int start, string digits, Dictionary<char, string> dict)
		{
			//result adding

			if (start == digits.Length)
			{

				result.Add(curr);
				return;
			}


			string str = dict[digits[start]];

			for (int i = 0; i < str.Length; i++)
			{

				curr = curr + str[i];
				dfs(result, curr, start + 1, digits, dict);
				curr = curr.Remove(curr.Length - 1);
			}
		}

	}





	class Program
	{
		static void Main(string[] args)
		{


			Problem prob = new Problem();

			List<string> result = prob.letterCombination("23");




			foreach (string num in result)
				Console.WriteLine(num);










		}
	}
}