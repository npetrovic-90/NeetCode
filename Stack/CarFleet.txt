using System;
using System.Collections.Generic;

namespace CodeInterview
{

	//	There are n cars going to the same destination along a one-lane road.The destination is target miles away.

	//You are given two integer array position and speed, both of length n, where position[i] is the position of the ith car and speed[i] is the speed of the ith car (in miles per hour).

	//A car can never pass another car ahead of it, but it can catch up to it and drive bumper to bumper at the same speed.The faster car will slow down to match the slower car's speed. The distance between these two cars is ignored (i.e., they are assumed to have the same position).

	//A car fleet is some non-empty set of cars driving at the same position and same speed. Note that a single car is also a car fleet.

	//If a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.

	//Return the number of car fleets that will arrive at the destination.




	//Example 1:

	//Input: target = 12, position = [10, 8, 0, 5, 3], speed = [2, 4, 1, 1, 3]
	//Output: 3
	//Explanation:
	//The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12.
	//The car starting at 0 does not catch up to any other car, so it is a fleet by itself.
	//The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.
	//Note that no other cars meet these fleets before the destination, so the answer is 3.
	class Problem
	{


		//Solution
		//make position,speed pairs and sort in reverse order using position
		//iterate through that newly created data structure and push element to the stack, but first calculate how much until current car reaches target position
		// (target-position)/speed
		// compare each time there are 2 elements on the stack if current top element of the stack is smaller than previously pushed element
		// if thats the case pop it from the stack, if not do not do anything
		//return length of the stack as result;


		private int maxLen = 0;
		private List<string> result = new List<string>();


		public int CarFleet(int target, int[] position, int[] speed)
		{
			//creating pairs of position speed and sorting them in reverse order, using position
			List<KeyValuePair<int, int>> list = new List<KeyValuePair<int, int>>();

			for (int i = 0; i < position.Length; i++)
				list.Add(new KeyValuePair<int, int>(position[i], speed[i]));

			list.Sort((x, y) => x.Key.CompareTo(y.Key));
			list.Reverse();

			//foreach (KeyValuePair<int, int> item in list)
			//	Console.WriteLine(item.Key + "," + item.Value);

			//Stack to hold result

			Stack<int> stack = new Stack<int>();

			foreach (KeyValuePair<int, int> item in list)
			{
				stack.Push((target - item.Key) / item.Value);

				if (stack.Count >= 2)
				{
					int curr = stack.Pop();

					if (curr <= stack.Peek()) continue;
					else stack.Push(curr);
				}

			}


			return stack.Count;





		}







	}


	class Program
	{
		static void Main(string[] args)
		{



			Problem problem = new Problem();
			int result = problem.CarFleet(12, new int[] { 10, 8, 0, 5, 3 }, new int[] { 2, 4, 1, 1, 3 });

			Console.WriteLine(result);



		}
	}
}