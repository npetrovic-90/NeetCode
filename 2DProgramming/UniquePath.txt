using System;

namespace CodeInterview
{

	//	62. Unique Paths
	//Medium

	//11166

	//334

	//Add to List

	//Share
	//There is a robot on an m x n grid.The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

	//Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

	//The test cases are generated so that the answer will be less than or equal to 2 * 109.




	//Example 1:


	//Input: m = 3, n = 7
	//Output: 28
	//Example 2:

	//Input: m = 3, n = 2
	//Output: 3
	//Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
	//1. Right -> Down -> Down
	//2. Down -> Down -> Right
	//3. Down -> Right -> Down
	class Problem
	{


		

		public int UniquePaths(int m, int n)
		{


			int[,] grid = new int[m, n];

			//fill out last row
			for (int i = 0; i < n; i++)
				grid[m - 1, i] = 1;

			///fill out last column
			for (int i = 0; i < m; i++)
				grid[i, n - 1] = 1;

			for (int i = m - 2; i >= 0; i--)
				for (int j = n - 2; j >= 0; j--)
					grid[i, j] = grid[i, j + 1] + grid[i + 1, j];

			return grid[0, 0];
		}




	}






	class Program
	{
		static void Main(string[] args)
		{



			Problem problem = new Problem();

			Console.WriteLine(problem.UniquePaths(3, 7));




		}
	}
}
