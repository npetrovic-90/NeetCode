using System;
using System.Collections.Generic;

namespace CodeInterview
{

	//	Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

	//You must write an algorithm that runs in O(n) time.




	//Example 1:

	//Input: nums = [100, 4, 200, 1, 3, 2]
	//Output: 4
	//Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
	class Problem
	{


		//Solution
		// add elements of an array to dictionary then for each element check his left and right side if it exists in array
		// keep on checking until it does not exist and count each check
		// do this for every sequence that exists in array


		public int longestConsecutive(int[] nums)
		{
			Dictionary<int, bool> dict = new Dictionary<int, bool>();

			foreach (int num in nums)
				dict.Add(num, true);


			int longest = 0;


			foreach (int num in nums)
			{
				if (!dict.ContainsKey(num))
				{
					continue;
				}
				dict[num] = false;
				int current = 1;
				int left = num - 1;
				int right = num + 1;

				while (dict.ContainsKey(left))
				{
					dict[left] = false;
					left--;
					current++;
				}

				while (dict.ContainsKey(right))
				{
					dict[right] = false;
					right++;
					current++;
				}

				if (current > longest)
				{
					longest = current;
				}
			}


			return longest;
		}



	}






	class Program
	{
		static void Main(string[] args)
		{



			Problem problem = new Problem();

			Console.WriteLine(problem.longestConsecutive(new int[] { 100, 4, 200, 1, 3, 2 }));





		}
	}
}