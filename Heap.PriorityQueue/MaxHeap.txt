using System;

namespace CodeInterview
{
	//	


	class Problem
	{

	}

	class Node
	{
		public Node left;
		public Node right;
		public int value;

		public Node(int value)
		{
			this.value = value;
			left = null;
			right = null;
		}
	}

	class MaxHeap
	{
		public Node root;
		public int size;

		public MaxHeap()
		{
			root = null;
			size = 0;
		}

		public int insertHeight()
		{
			int i = 1;
			int sum = 0;

			while (this.size > sum + (1 << i))
			{
				sum = sum + (1 << i);
				i++;
			}

			return i;
		}

		public void swapNode(Node first, Node second)
		{
			int tmp = first.value;
			first.value = second.value;
			second.value = tmp;
		}

		public void arrangeNode(Node root)
		{
			if (root.left != null && root.left.value > root.value)
				swapNode(root, root.left);

			if (root.right != null && root.right.value > root.value)
				swapNode(root, root.right);
		}

		public void insert(int value)
		{
			if (root == null)
				root = new Node(value);
			else if (root.left == null)
			{
				root.left = new Node(value);
				arrangeNode(root);
			}
			else if (root.right == null)
			{
				root.right = new Node(value);
				arrangeNode(root);
			}
			else
			{
				addNode(root, this.insertHeight(), 0, value);

			}
			this.size++;
		}
		public bool addNode(Node root, int height, int level, int value)
		{
			if (level >= height) return false;

			if (root != null)
			{

				if (level - 1 == height && root.left == null || root.right == null)
				{

					if (root.left == null)
						root.left = new Node(value);
					else root.right = new Node(value);

					arrangeNode(root);
					return true;

				}
				Console.WriteLine(root.left.value);
				if (addNode(root.left, height, level + 1, value) || addNode(root.right, height, level + 1, value))
				{

					arrangeNode(root);
					return true;
				}

			}

			return false;
		}
		public void preorder(Node root)
		{
			if (root != null)
			{
				Console.Write(" " + root.value);
				preorder(root.left);
				preorder(root.right);
			}
		}
	}


	class Program
	{
		static void Main(string[] args)
		{


			MaxHeap maxHeap = new MaxHeap();

			maxHeap.insert(20);
			maxHeap.insert(10);
			maxHeap.preorder(maxHeap.root);
			Console.WriteLine();
			maxHeap.insert(15);
			maxHeap.preorder(maxHeap.root);
			Console.WriteLine();
			maxHeap.insert(30);
			maxHeap.preorder(maxHeap.root);
			Console.WriteLine();
			maxHeap.insert(17);





			maxHeap.preorder(maxHeap.root);
			Console.WriteLine();




		}
	}
}