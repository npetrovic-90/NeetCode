using System;
using System.Collections.Generic;

namespace CodeInterview
{
	//	




	public class Node
	{
		public Node left;
		public Node right;
		public int value;

		public Node(int value)
		{
			this.value = value;
			left = null;
			right = null;
		}
	}

	class MaxHeap
	{
		public Node root;
		public int size;

		public MaxHeap()
		{
			root = null;
			size = 0;
		}

		public int insertHeight()
		{
			int i = 1;
			int sum = 0;

			while (this.size > sum + (1 << i))
			{
				sum = sum + (1 << i);
				i++;
			}

			return i;
		}

		public void swapNode(Node first, Node second)
		{
			int tmp = first.value;
			first.value = second.value;
			second.value = tmp;
		}

		public void arrangeNode(Node root)
		{
			if (root.left != null && root.left.value > root.value)
				swapNode(root, root.left);

			if (root.right != null && root.right.value > root.value)
				swapNode(root, root.right);
		}

		public void insert(int key)
		{


			if (root == null)
			{
				root = new Node(key);
			}
			else
			if (root.left == null)
			{
				root.left = new Node(key);
				arrangeNode(root);
			}
			else
			if (root.right == null)
			{
				root.right = new Node(key);
				arrangeNode(root);
			}
			else
			{
				int height = insertHeight();
				addNode(root, height, 0, key);
			}
			this.size++;
		}
		public bool addNode(Node root, int height, int level, int key)
		{
			if (level >= height)
			{
				return false;
			}
			if (root != null)
			{
				if (level - 1 == height && root.left == null || root.right == null)
				{
					if (root.left == null)
					{
						root.left = new Node(key);
					}
					else
					{
						root.right = new Node(key);
					}
					arrangeNode(root);
					return true;
				}
				if (addNode(root.left, height, level + 1, key) ||
					addNode(root.right, height, level + 1, key))
				{
					arrangeNode(root);
					return true;
				}
			}
			return false;
		}
		public void preorder(Node root)
		{
			if (root != null)
			{
				Console.Write(" " + root.value);
				preorder(root.left);
				preorder(root.right);
			}
		}
		public Node findLastInsertedNode(Node root, int index, int height)
		{
			Console.WriteLine("\nHeight is:" + height);
			if (index == 1) return root;


			int power = (size >> height) & 1;


			if (power == 0)
			{
				Console.WriteLine("Moving left");
				return findLastInsertedNode(root.left, index / 2, height - 1);
			}
			Console.WriteLine("Moving right");
			return findLastInsertedNode(root.right, index / 2, height - 1);



		}

		public void RemoveNode(Node parentOfRemoved)
		{


			if (parentOfRemoved.left != null && parentOfRemoved.right != null)
			{
				Console.WriteLine("\nRemoving node: " + parentOfRemoved.right.value);
				parentOfRemoved.right = null;
			}
			else if (parentOfRemoved.left != null && parentOfRemoved.right == null)
			{
				Console.WriteLine("\nRemoving node: " + parentOfRemoved.left.value);
				parentOfRemoved.left = null;
			}
			size--;
		}
		public void arrangeAllNodes(Node root)
		{
			if (root != null)
			{
				arrangeNode(root);

				arrangeAllNodes(root.left);

				arrangeAllNodes(root.right);
			}
		}



	}

	class MinHeap
	{
		public Node root;
		public int size;

		public MinHeap()
		{
			size = 0;
			root = null;
		}

		public int getHeight()
		{
			int i = 1;
			int sum = 0;

			while (this.size > sum + (1 << i))
			{
				sum = sum + (1 << i);
				i++;
			}

			return i;
		}

		public void swapNode(Node first, Node second)
		{
			int tmp = first.value;
			first.value = second.value;
			second.value = tmp;
		}

		public void arrangeNode(Node root)
		{
			if (root.left != null && root.left.value < root.value)
				swapNode(root, root.left);
			if (root.right != null && root.right.value < root.value)
				swapNode(root, root.right);
		}

		public void arrangeAllNodes(Node root)
		{
			if (root != null)
			{
				arrangeNode(root);
				arrangeAllNodes(root.left);
				arrangeAllNodes(root.right);
			}
		}
		public void insert(int value)
		{
			if (root == null)
				root = new Node(value);

			else if (root.left == null)
			{
				root.left = new Node(value);
				arrangeNode(root);
			}

			else if (root.right == null)
			{
				root.right = new Node(value);
				arrangeNode(root);
			}
			else
			{
				addNode(root, getHeight(), 0, value);
			}
			this.size++;

		}
		private bool addNode(Node root, int height, int level, int value)
		{
			if (level >= height) return false;

			if (root != null)
			{
				if (level - 1 == height && root.left == null || root.right == null)
				{
					if (root.left == null)
						root.left = new Node(value);
					else root.right = new Node(value);
					arrangeNode(root);

					return true;
				}

				if (addNode(root.left, height, level + 1, value) || addNode(root.right, height, level + 1, value))
				{

					arrangeNode(root);
					return true;
				}

			}

			return false;
		}
		public Node findNode(Node root)
		{
			Queue<Node> queue = new Queue<Node>();
			List<Node> list = new List<Node>();
			queue.Enqueue(root);
			while (queue.Count > 0)
			{
				int range = queue.Count;
				while (range != 0)
				{
					Node tmp = queue.Dequeue();
					if (tmp.left != null) queue.Enqueue(tmp.left);
					if (tmp.right != null) queue.Enqueue(tmp.right);
					range--;

					list.Add(tmp);
				}

			}
			Console.WriteLine(list[list.Count - 1].value);
			return list[list.Count - 1];


		}

		public Node findLastInsertedNode(Node root, int index)
		{
			if (index == 1) return root;

			int power = (int)Math.Exp(Math.Floor(Math.Log(index, 2)) - 1);

			int new_index = power + index % power;
			if (index < 3 * power)
				return findLastInsertedNode(root.left, new_index);
			return findLastInsertedNode(root.right, new_index);



		}

		public void RemoveNode(Node root)
		{
			Node parentOfRemoved = findLastInsertedNode(root, size / 2);



			if (parentOfRemoved.left != null && parentOfRemoved.right != null)
				parentOfRemoved.right = null;
			else parentOfRemoved.left = null;

			size--;
		}


		public void preorder(Node root)
		{
			if (root != null)
			{
				Console.Write(" " + root.value);
				preorder(root.left);
				preorder(root.right);
			}
		}
	}

	//	215. Kth Largest Element in an Array
	//Medium

	//9601

	//501

	//Add to List

	//Share
	//Given an integer array nums and an integer k, return the kth largest element in the array.

	//Note that it is the kth largest element in the sorted order, not the kth distinct element.



	//Example 1:

	//Input: nums = [3, 2, 1, 5, 6, 4], k = 2
	//Output: 5


	class Problem
	{
		public int FindKthLargest(int[] nums, int k)
		{


			MaxHeap maxHeap = new MaxHeap();
			int range = k;
			foreach (int num in nums)
				maxHeap.insert(num);





			while (k > 1)
			{
				Console.WriteLine("\nHeap before every removal:");
				maxHeap.preorder(maxHeap.root);


				maxHeap.swapNode(maxHeap.root, maxHeap.findLastInsertedNode(maxHeap.root, maxHeap.size, maxHeap.insertHeight() - 1));
				maxHeap.RemoveNode(maxHeap.findLastInsertedNode(maxHeap.root, maxHeap.size / 2, maxHeap.insertHeight() - 1));
				maxHeap.arrangeAllNodes(maxHeap.root);
				Console.WriteLine("\nHeap after every removal:");
				maxHeap.preorder(maxHeap.root);


				Console.WriteLine("");
				k--;
			}


			return maxHeap.root.value;
		}

	}

	class Program
	{
		static void Main(string[] args)
		{



			Problem solution = new Problem();
			int[] nums = new int[] { 10, 11, 2, 100, 23, 45, 1, 25, 67, 98, 105, 150, 160, 200 };


			int res = solution.FindKthLargest(nums, 4);
			Console.WriteLine("\nMax is:" + res);


			MaxHeap heap = new MaxHeap();

			foreach (int i in nums)
				heap.insert(i);

			//Console.WriteLine(heap.findLastInsertedNode(heap.root, heap.size).value);






		}
	}
}