using System;
using System.Collections.Generic;

namespace CodeInterview
{
	//	


	class Problem
	{

	}

	public class Node
	{
		public Node left;
		public Node right;
		public int value;

		public Node(int value)
		{
			this.value = value;
			left = null;
			right = null;
		}
	}

	class MaxHeap
	{
		public Node root;
		public int size;

		public MaxHeap()
		{
			root = null;
			size = 0;
		}

		public int insertHeight()
		{
			int i = 1;
			int sum = 0;

			while (this.size > sum + (1 << i))
			{
				sum = sum + (1 << i);
				i++;
			}

			return i;
		}

		public void swapNode(Node first, Node second)
		{
			int tmp = first.value;
			first.value = second.value;
			second.value = tmp;
		}

		public void arrangeNode(Node root)
		{
			if (root.left != null && root.left.value > root.value)
				swapNode(root, root.left);

			if (root.right != null && root.right.value > root.value)
				swapNode(root, root.right);
		}

		public void insert(int key)
		{


			if (root == null)
			{
				root = new Node(key);
			}
			else
			if (root.left == null)
			{
				root.left = new Node(key);
				arrangeNode(root);
			}
			else
			if (root.right == null)
			{
				root.right = new Node(key);
				arrangeNode(root);
			}
			else
			{
				int height = insertHeight();
				addNode(root, height, 0, key);
			}
			this.size++;
		}
		public bool addNode(Node root, int height, int level, int key)
		{
			if (level >= height)
			{
				return false;
			}
			if (root != null)
			{
				if (level - 1 == height && root.left == null || root.right == null)
				{
					if (root.left == null)
					{
						root.left = new Node(key);
					}
					else
					{
						root.right = new Node(key);
					}
					arrangeNode(root);
					return true;
				}
				if (addNode(root.left, height, level + 1, key) ||
					addNode(root.right, height, level + 1, key))
				{
					arrangeNode(root);
					return true;
				}
			}
			return false;
		}
		public void preorder(Node root)
		{
			if (root != null)
			{
				Console.Write(" " + root.value);
				preorder(root.left);
				preorder(root.right);
			}
		}
		private Node findLastInsertedNode(Node root, int index)
		{
			if (index == 1) return root;

			int power = 2 * (int)(Math.Floor(Math.Log(index, 2))) - 1;
			int new_index = power + index % power;
			if (index < 3 * power)
				return findLastInsertedNode(root.left, new_index);
			return findLastInsertedNode(root.right, new_index);



		}

		public void RemoveNode(Node root)
		{
			Node parentOfRemoved = findLastInsertedNode(root, size / 2);
			Console.WriteLine("parent:" + parentOfRemoved.value + "left child:" + parentOfRemoved.left.value + "right child:" + parentOfRemoved.right.value);

			if (parentOfRemoved.left != null && parentOfRemoved.right != null)
				parentOfRemoved.right = null;
			else parentOfRemoved.left = null;
		}
	}

	class MinHeap
	{
		public Node root;
		public int size;

		public MinHeap()
		{
			size = 0;
			root = null;
		}

		public int getHeight()
		{
			int i = 1;
			int sum = 0;

			while (this.size > sum + (1 << i))
			{
				sum = sum + (1 << i);
				i++;
			}

			return i;
		}

		public void swapNode(Node first, Node second)
		{
			int tmp = first.value;
			first.value = second.value;
			second.value = tmp;
		}

		public void arrangeNode(Node root)
		{
			if (root.left != null && root.left.value < root.value)
				swapNode(root, root.left);
			if (root.right != null && root.right.value < root.value)
				swapNode(root, root.right);
		}
		public void insert(int value)
		{
			if (root == null)
				root = new Node(value);

			else if (root.left == null)
			{
				root.left = new Node(value);
				arrangeNode(root);
			}

			else if (root.right == null)
			{
				root.right = new Node(value);
				arrangeNode(root);
			}
			else
			{
				addNode(root, getHeight(), 0, value);
			}
			this.size++;

		}
		private bool addNode(Node root, int height, int level, int value)
		{
			if (level >= height) return false;

			if (root != null)
			{
				if (level - 1 == height && root.left == null || root.right == null)
				{
					if (root.left == null)
						root.left = new Node(value);
					else root.right = new Node(value);
					arrangeNode(root);

					return true;
				}

				if (addNode(root.left, height, level + 1, value) || addNode(root.right, height, level + 1, value))
				{

					arrangeNode(root);
					return true;
				}

			}

			return false;
		}
		public Node findNode(Node root)
		{
			Queue<Node> queue = new Queue<Node>();
			List<Node> list = new List<Node>();
			queue.Enqueue(root);
			while (queue.Count > 0)
			{
				int range = queue.Count;
				while (range != 0)
				{
					Node tmp = queue.Dequeue();
					if (tmp.left != null) queue.Enqueue(tmp.left);
					if (tmp.right != null) queue.Enqueue(tmp.right);
					range--;

					list.Add(tmp);
				}

			}
			Console.WriteLine(list[list.Count - 1].value);
			return list[list.Count - 1];


		}

		private Node findLastInsertedNode(Node root, int index)
		{
			if (index == 1) return root;

			int power = (int)Math.Exp(Math.Floor(Math.Log(index, 2)) - 1);

			int new_index = power + index % power;
			if (index < 3 * power)
				return findLastInsertedNode(root.left, new_index);
			return findLastInsertedNode(root.right, new_index);



		}

		public void RemoveNode(Node root)
		{
			Node parentOfRemoved = findLastInsertedNode(root, size / 2);

			Console.WriteLine("parent:" + parentOfRemoved.value);

			if (parentOfRemoved.left != null && parentOfRemoved.right != null)
				parentOfRemoved.right = null;
			else parentOfRemoved.left = null;
		}


		public void preorder(Node root)
		{
			if (root != null)
			{
				Console.Write(" " + root.value);
				preorder(root.left);
				preorder(root.right);
			}
		}
	}


	class Program
	{
		static void Main(string[] args)
		{

			MinHeap minHeap = new MinHeap();

			minHeap.insert(1);
			minHeap.insert(2);
			minHeap.insert(3);
			minHeap.insert(4);
			minHeap.insert(5);
			minHeap.insert(6);
			minHeap.insert(7);



			minHeap.preorder(minHeap.root);
			Console.WriteLine();
			Console.WriteLine("size:" + minHeap.size);

			Console.WriteLine("   " + minHeap.root.value);
			Console.WriteLine("  " + minHeap.root.left.value + "  " + minHeap.root.right.value);
			Console.Write(" " + minHeap.root.left.left.value + " " + minHeap.root.left.right.value);
			Console.Write(" " + minHeap.root.right.left.value); Console.Write(" " + minHeap.root.right.right.value);
			Console.WriteLine();


			minHeap.RemoveNode(minHeap.root);


			minHeap.preorder(minHeap.root);
			Console.WriteLine();

			Console.WriteLine("   " + minHeap.root.value);
			Console.WriteLine("  " + minHeap.root.left.value + "  " + minHeap.root.right.value);
			Console.Write(" " + minHeap.root.left.left.value + " " + minHeap.root.left.right.value);
			Console.Write(" " + minHeap.root.right.left.value);
			if (minHeap.root.right.right == null) Console.Write("removed");

			else Console.Write(" " + minHeap.root.right.right.value);
			Console.WriteLine();
			Console.WriteLine();




		}
	}
}