using System;
using System.Collections.Generic;

namespace CodeInterview
{
	//	




	public class Node
	{
		public Node left;
		public Node right;
		public int value;

		public Node(int value)
		{
			this.value = value;
			left = null;
			right = null;
		}
	}

	class MaxHeap
	{
		public Node root;
		public int size;

		public MaxHeap()
		{
			root = null;
			size = 0;
		}

		public int insertHeight()
		{
			int i = 1;
			int sum = 0;

			while (this.size > sum + (1 << i))
			{
				sum = sum + (1 << i);
				i++;
			}

			return i;
		}

		public void swapNode(Node first, Node second)
		{
			int tmp = first.value;
			first.value = second.value;
			second.value = tmp;
		}

		public void arrangeNode(Node root)
		{
			if (root.left != null && root.left.value > root.value)
				swapNode(root, root.left);

			if (root.right != null && root.right.value > root.value)
				swapNode(root, root.right);
		}

		public void insert(int key)
		{


			if (root == null)
			{
				root = new Node(key);
			}
			else
			if (root.left == null)
			{
				root.left = new Node(key);
				arrangeNode(root);
			}
			else
			if (root.right == null)
			{
				root.right = new Node(key);
				arrangeNode(root);
			}
			else
			{
				int height = insertHeight();
				addNode(root, height, 0, key);
			}
			this.size++;
		}
		public bool addNode(Node root, int height, int level, int key)
		{
			if (level >= height)
			{
				return false;
			}
			if (root != null)
			{
				if (level - 1 == height && root.left == null || root.right == null)
				{
					if (root.left == null)
					{
						root.left = new Node(key);
					}
					else
					{
						root.right = new Node(key);
					}
					arrangeNode(root);
					return true;
				}
				if (addNode(root.left, height, level + 1, key) ||
					addNode(root.right, height, level + 1, key))
				{
					arrangeNode(root);
					return true;
				}
			}
			return false;
		}
		public void preorder(Node root)
		{
			if (root != null)
			{
				Console.Write(" " + root.value);
				preorder(root.left);
				preorder(root.right);
			}
		}
		public Node findLastInsertedNode(Node root, int index)
		{
			if (index == 1) return root;

			int power = (int)Math.Exp((Math.Floor(Math.Log(index, 2))) - 1);
			int new_index = power + index % power;
			if (index < 3 * power)
				return findLastInsertedNode(root.left, new_index);
			return findLastInsertedNode(root.right, new_index);



		}

		public void RemoveNode(Node root)
		{
			Node parentOfRemoved = findLastInsertedNode(root, size / 2);

			if (parentOfRemoved == null) return;

			if (parentOfRemoved.left != null && parentOfRemoved.right != null)
				parentOfRemoved.right = null;
			else parentOfRemoved.left = null;
			size--;
		}
		public void arrangeAllNodes(Node root)
		{
			if (root != null)
			{
				arrangeNode(root);
				arrangeAllNodes(root.left);
				arrangeAllNodes(root.right);
			}
		}
	}

	class MinHeap
	{
		public Node root;
		public int size;

		public MinHeap()
		{
			size = 0;
			root = null;
		}

		public int getHeight()
		{
			int i = 1;
			int sum = 0;

			while (this.size > sum + (1 << i))
			{
				sum = sum + (1 << i);
				i++;
			}

			return i;
		}

		public void swapNode(Node first, Node second)
		{
			int tmp = first.value;
			first.value = second.value;
			second.value = tmp;
		}

		public void arrangeNode(Node root)
		{
			if (root.left != null && root.left.value < root.value)
				swapNode(root, root.left);
			if (root.right != null && root.right.value < root.value)
				swapNode(root, root.right);
		}

		public void arrangeAllNodes(Node root)
		{
			if (root != null)
			{
				arrangeNode(root);
				arrangeAllNodes(root.left);
				arrangeAllNodes(root.right);
			}
		}
		public void insert(int value)
		{
			if (root == null)
				root = new Node(value);

			else if (root.left == null)
			{
				root.left = new Node(value);
				arrangeNode(root);
			}

			else if (root.right == null)
			{
				root.right = new Node(value);
				arrangeNode(root);
			}
			else
			{
				addNode(root, getHeight(), 0, value);
			}
			this.size++;

		}
		private bool addNode(Node root, int height, int level, int value)
		{
			if (level >= height) return false;

			if (root != null)
			{
				if (level - 1 == height && root.left == null || root.right == null)
				{
					if (root.left == null)
						root.left = new Node(value);
					else root.right = new Node(value);
					arrangeNode(root);

					return true;
				}

				if (addNode(root.left, height, level + 1, value) || addNode(root.right, height, level + 1, value))
				{

					arrangeNode(root);
					return true;
				}

			}

			return false;
		}
		public Node findNode(Node root)
		{
			Queue<Node> queue = new Queue<Node>();
			List<Node> list = new List<Node>();
			queue.Enqueue(root);
			while (queue.Count > 0)
			{
				int range = queue.Count;
				while (range != 0)
				{
					Node tmp = queue.Dequeue();
					if (tmp.left != null) queue.Enqueue(tmp.left);
					if (tmp.right != null) queue.Enqueue(tmp.right);
					range--;

					list.Add(tmp);
				}

			}
			Console.WriteLine(list[list.Count - 1].value);
			return list[list.Count - 1];


		}

		public Node findLastInsertedNode(Node root, int index)
		{
			if (index == 1) return root;

			int power = (int)Math.Exp(Math.Floor(Math.Log(index, 2)) - 1);

			int new_index = power + index % power;
			if (index < 3 * power)
				return findLastInsertedNode(root.left, new_index);
			return findLastInsertedNode(root.right, new_index);



		}

		public void RemoveNode(Node root)
		{
			Node parentOfRemoved = findLastInsertedNode(root, size / 2);



			if (parentOfRemoved.left != null && parentOfRemoved.right != null)
				parentOfRemoved.right = null;
			else parentOfRemoved.left = null;

			size--;
		}


		public void preorder(Node root)
		{
			if (root != null)
			{
				Console.Write(" " + root.value);
				preorder(root.left);
				preorder(root.right);
			}
		}
	}

	//	Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin(0, 0).

	//The distance between two points on the X-Y plane is the Euclidean distance(i.e., âˆš(x1 - x2)2 + (y1 - y2)2).

	//You may return the answer in any order.The answer is guaranteed to be unique (except for the order that it is in).



	//Example 1:


	//Input: points = [[1,3],[-2,2]], k = 1
	//Output: [[-2,2]]
	//Explanation:
	//The distance between(1, 3) and the origin is sqrt(10).
	//The distance between(-2, 2) and the origin is sqrt(8).
	//Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
	//We only want the closest k = 1 points from the origin, so the answer is just[[-2, 2]].


	class Problem
	{
		public List<int> findClosestPoints(int[,] points, int k)
		{
			MinHeap minHeap = new MinHeap();
			List<int> list = new List<int>();

			List<int> result = new List<int>();

			for (int i = 0; i < points.GetLength(0); i++)
			{
				int sum = 0;
				for (int j = 0; j < points.GetLength(1); j++)
					sum = sum + points[i, j] * points[i, j];
				Console.WriteLine("sum of points is:" + sum);
				minHeap.insert(sum);

			}


			while (minHeap.size >= k)
			{
				list.Add(minHeap.root.value);
				minHeap.swapNode(minHeap.root, minHeap.findLastInsertedNode(minHeap.root, minHeap.size));
				minHeap.RemoveNode(minHeap.root);
				minHeap.arrangeAllNodes(minHeap.root);

			}

			foreach (int i in list)
				Console.Write(i + " ");


			Console.WriteLine();

			for (int i = 0; i < points.GetLength(0); i++)
			{
				int sum = 0;
				for (int j = 0; j < points.GetLength(1); j++)
					sum = sum + points[i, j] * points[i, j];

				if (list.Contains(sum))
					result.Add(i);



			}

			return result;
		}
	}

	class Program
	{
		static void Main(string[] args)
		{

			int k = 2;
			int[,] points = new int[,] { { 3, 3 }, { 5, -1 }, { -2, 4 } };

			List<int> result = new List<int>();
			Problem solution = new Problem();
			result = solution.findClosestPoints(points, k);
			foreach (int i in result)
				Console.WriteLine(i);

			foreach (int i in result)
			{
				Console.Write("{");
				for (int j = 0; j < points.GetLength(1); j++)
					Console.Write(points[i, j] + ",");
				Console.WriteLine("}");
			}



		}
	}
}