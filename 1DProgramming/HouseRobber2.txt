using System;

namespace CodeInterview
{

	//	213. House Robber II
	//Medium

	//6333

	//100

	//Add to List

	//Share
	//You are a professional robber planning to rob houses along a street.Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.

	//Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.



	//Example 1:

	//Input: nums = [2, 3, 2]
	//Output: 3
	//Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.
	class Problem
	{





		private int Robber(int[] nums, int start, int end)
		{
			int next = 0;
			int previous = 0;
			int curr = 0;

			for (int i = start; i < end; i++)
			{
				next = Math.Max(previous + nums[i], curr);
				previous = curr;
				curr = next;
			}


			return curr;
		}

		public int Rob(int[] nums)
		{
			int n = nums.Length;

			if (n == 1) return nums[0];


			int range1 = Robber(nums, 0, n - 1);
			int range2 = Robber(nums, 1, n);


			return Math.Max(range1, range2);
		}

	}






	class Program
	{
		static void Main(string[] args)
		{

			Problem problem = new Problem();



			Console.WriteLine(problem.Rob(new int[] { 2, 3, 2 }));





		}
	}
}
