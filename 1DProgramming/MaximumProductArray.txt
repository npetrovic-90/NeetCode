using System;

namespace CodeInterview
{

	//	152. Maximum Product Subarray
	//Medium

	//12892

	//390

	//Add to List

	//Share
	//Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

	//The test cases are generated so that the answer will fit in a 32-bit integer.

	//A subarray is a contiguous subsequence of the array.




	//Example 1:

	//Input: nums = [2, 3, -2, 4]
	//Output: 6
	//Explanation: [2,3] has the largest product 6.
	class Problem
	{
		public int MaxProduct(int[] nums)
		{
			int currMax = nums[0];
			int currMin = nums[0];

			int result = nums[0];


			for (int i = 1; i < nums.Length; i++)
			{
				int tmp = currMax;
				currMax = Math.Max(Math.Max(currMin * nums[i], currMax * nums[i]), nums[i]);
				currMin = Math.Min(Math.Min(currMin * nums[i], tmp * nums[i]), nums[i]);

				result = Math.Max(result, currMax);
			}

			return result;
		}



	}


	class Program
	{
		static void Main(string[] args)
		{

			Problem problem = new Problem();

			Console.WriteLine(problem.MaxProduct(new int[] { 2, 3, -2, 4 }));

		}
	}
}
