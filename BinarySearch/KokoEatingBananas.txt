using System;

namespace CodeInterview
{

	////	Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix.This matrix has the following properties:

	////Integers in each row are sorted from left to right.
	////The first integer of each row is greater than the last integer of the previous row.


	////Example 1:


	////Input: matrix = [[1, 3, 5, 7], [10,11,16,20], [23,30,34,60]], target = 3
	////Output: true
	class Problem
	{


		//Solution
		//





		public int minEatingSpeed(int[] piles, int h)
		{
			int minSpeed = Int32.MaxValue;
			int start = 1;
			int max = Int32.MinValue;

			for (int i = 0; i < piles.Length; i++)
				max = Math.Max(max, piles[i]);

			int end = max;

			while (start <= end)
			{
				int mid = (start + end) / 2;
				int hours = count(piles, mid);

				if (hours >= h)
				{
					minSpeed = Math.Min(minSpeed, mid);
					start = mid + 1;
				}
				else
				{
					end = mid - 1;
				}
			}

			return minSpeed;
		}

		private int count(int[] arr, int num)
		{
			int res = 0;
			for (int i = 0; i < arr.Length; i++)
			{
				res = res + (arr[i] / num) + (arr[i] % num == 0 ? 0 : 1);
			}

			return res;
		}







	}


	class Program
	{
		static void Main(string[] args)
		{



			Problem problem = new Problem();
			int result = problem.minEatingSpeed(new int[] { 3, 6, 7, 11 }, 8);

			Console.WriteLine(result);



		}
	}
}