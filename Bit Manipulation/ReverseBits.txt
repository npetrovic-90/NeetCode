using System;

namespace CodeInterview
{

	//	Reverse bits of a given 32 bits unsigned integer.



	//	Input: n = 00000010100101000001111010011100
	//Output:    964176192 (00111001011110000010100101000000)
	//Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.
	class Problem
	{


		//Solution
		//using logical AND will we find corresponding position where 1 exists in give number then we will use logical OR and shift X amount to the left
		//to place that 1 in its corresponding position


		public int ReverseBits(int n)
		{
			int result = 0;
			int bit;
			for (int i = 1; i < 32; i++)
			{
				bit = (n >> i) & 1;



				result = result | (bit << 31 - i);
			}
			return result;


		}


	}



	class Program
	{
		static void Main(string[] args)
		{



			Problem problem = new Problem();

			Console.WriteLine(problem.ReverseBits(268435456));



		}
	}
}