using System;

namespace CodeInterview
{

	//Write a function that takes an unsigned integer and returns the number of '1' bits it has(also known as the Hamming weight).

	//Note:

	//Note that in some languages, such as Java, there is no unsigned integer type.In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
	//In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.


	//Example 1:

	//Input: n = 00000000000000000000000000001011
	//Output: 3
	//Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.
	class Problem
	{


		//Solution
		//Using logical AND to compare binaryInteger to number 1, if result is 1 we increment
		//if not we do nothing.
		//Then we shift binaryInteger to the right by 1.
		
		public int hammingWeight(int binaryInteger)
		{
			int result = 0;


			while (binaryInteger != 0)
			{
				if ((binaryInteger & 1) == 1)
					result++;

				binaryInteger = binaryInteger >> 1;
			}

			return result;

		}


	}
	class Program
	{
		static void Main(string[] args)
		{
			Problem problem = new Problem();

			int binary = 0b100000000111;

			Console.WriteLine(binary);

			Console.WriteLine(problem.hammingWeight(binary));


		}
	}
}