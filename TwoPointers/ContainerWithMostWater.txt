using System;

namespace CodeInterview
{

	//	You are given an integer array height of length n.There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and(i, height[i]).

	//Find two lines that together with the x-axis form a container, such that the container contains the most water.

	//Return the maximum amount of water a container can store.

	//Notice that you may not slant the container.



	//Example 1:


	//Input: height = [1, 8, 6, 2, 5, 4, 8, 3, 7]
	//Output: 49
	//Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
	class Problem
	{


		//Solution
		// compare min of 2 heights and multiply by containerLength, then find maximum betwee result and current calculated area.



		public int maxArea(int[] height)
		{
			int left = 0;
			int right = height.Length - 1;

			int result = 0;

			while (left < right)
			{
				int containerLength = right - left;
				int area = containerLength * Math.Min(height[left], height[right]);

				result = Math.Max(result, area);

				if (height[left] < height[right]) left++;
				else right--;

			}

			//sort

			return result;


		}





	}


	class Program
	{
		static void Main(string[] args)
		{



			Problem problem = new Problem();

			Console.WriteLine(problem.maxArea(new int[] { 1, 8, 6, 2, 5, 4, 8, 3, 7 }));



		}
	}
}