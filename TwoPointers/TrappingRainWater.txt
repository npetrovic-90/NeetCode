using System;

namespace CodeInterview
{

	//	Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.



	//Example 1:


	//Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
	//	Output: 6
	//Explanation: The above elevation map(black section) is represented by array[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]. In this case, 6 units of rain water (blue section) are being trapped.
	class Problem
	{


		//Solution
		//2 pointers, left and right, move them depending on minimum of the 2 heights they point to, if heights are equal move left one.
		// when leftMax is less or equal to rightMax, find new maximum and store sum of leftMax - height[left]
		// same for right
		//return result



		public int Trap(int[] height)
		{

			int left = 0;
			int right = height.Length - 1;

			int leftMax = height[left];
			int rightMax = height[right];

			int result = 0;

			while (left < right)
			{
				if (leftMax <= rightMax)
				{
					left++;
					leftMax = Math.Max(leftMax, height[left]);
					result = result + leftMax - height[left];
				}
				else
				{
					right--;
					rightMax = Math.Max(rightMax, height[right]);
					result = result + rightMax - height[right];
				}
			}

			return result;

		}





	}


	class Program
	{
		static void Main(string[] args)
		{



			Problem problem = new Problem();

			Console.WriteLine(problem.Trap(new int[] { 0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1 }));



		}
	}
}