using System;

namespace CodeInterview
{
	//	57. Insert Interval
	//Medium

	//5423

	//374

	//Add to List

	//Share
	//You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti.You are also given an interval newInterval = [start, end] that represents the start and end of another interval.

	//Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).

	//Return intervals after the insertion.



	//Example 1:

	//Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
	//	Output: [[1,5],[6,9]]



	class Problem
	{

		public int[][] insert(int[][] intervals, int[] newInterval)
		{
			int i = 0;
			int j = 0;
			int num_of_intervals = intervals.Length;

			int[][] result = new int[num_of_intervals + 1][];

			while (i < num_of_intervals && intervals[i][1] < newInterval[0])
			{
				result[j] = intervals[i];
				i++;
				j++;

			}

			while (i < num_of_intervals && intervals[i][0] <= newInterval[1])
			{
				newInterval[0] = Math.Min(newInterval[0], intervals[i][0]);
				newInterval[1] = Math.Max(newInterval[1], intervals[i][1]);
				i++;

			}

			result[j] = newInterval;
			j++;

			while (i < num_of_intervals)
			{
				result[j] = intervals[i];
				i++;
				j++;

			}



			return result;

		}

	}





	class Program
	{
		static void Main(string[] args)
		{


			Problem prob = new Problem();

			int[][] result = prob.insert(new int[][] {
				new int[2] { 1, 2 },
				new int[2] { 3, 5 },
				new int[2] { 6, 7 },
				new int[2] { 8, 10 },
				new int[2] { 12, 16 }

			}

			, new int[] { 4, 8 });



			Console.Write("[");
			foreach (int[] interval in result)
			{
				Console.Write("[");
				foreach (int num in interval)
					Console.Write(num + ",");
				Console.Write("]");
			}
			Console.Write("]");










		}
	}
}