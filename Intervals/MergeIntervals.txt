using System;

namespace CodeInterview
{
	//	56. Merge Intervals
	//Medium

	//15025

	//549

	//Add to List

	//Share
	//Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.



	//Example 1:

	//Input: intervals = [[1, 3], [2,6], [8,10], [15,18]]
	//Output: [[1,6],[8,10],[15,18]]
	//Explanation: Since intervals[1, 3] and[2, 6] overlap, merge them into[1, 6].



	class Problem
	{

		public int[][] mergeIntervals(int[][] intervals)
		{
			int num_of_intervals = intervals.Length;

			if (num_of_intervals == 1) { return intervals; }

			int[][] result = new int[num_of_intervals + 1][];

			int i = 0;
			int j = 0;

			while (i < num_of_intervals - 1)
			{
				if (intervals[i][1] >= intervals[i + 1][0])
				{
					intervals[i + 1][0] = intervals[i][0];
					intervals[i + 1][1] = Math.Max(intervals[i][1], intervals[i + 1][1]);
				}
				else
				{
					result[j] = intervals[i];
					j++;
				}
				i++;



			}

			result[j] = intervals[i];

			return result;
		}

	}





	class Program
	{
		static void Main(string[] args)
		{


			Problem prob = new Problem();

			int[][] result = prob.mergeIntervals(new int[][] {
				new int[2] { 1, 3 },
				new int[2] { 2, 6 },
				new int[2] { 8, 10 },
				new int[2] { 15, 18 }

			});



			Console.Write("[");
			foreach (int[] interval in result)
			{
				Console.Write("[");
				foreach (int num in interval)
					Console.Write(num + ",");
				Console.Write("]");
			}
			Console.Write("]");


		}
	}
}