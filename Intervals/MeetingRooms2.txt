using System;

namespace CodeInterview
{
	//	920 Â· Meeting Rooms
	//Algorithms
	//Easy
	//Accepted Rate
	//50%
	//Description
	//Solution
	//Notes
	//Discuss
	//Leaderboard
	//Description
	//Given an array of meeting time intervals consisting of start and end times[[s1, e1],[s2, e2],...] (si<ei), determine if a person could attend all meetings.



	class Problem
	{

		public int MinMeetingRooms(int[][] intervals)
		{
			int result = 0;
			int count = 0;
			int[] start_times = new int[intervals.Length];
			int[] end_times = new int[intervals.Length];
			int i = 0;
			int start = 0;
			int end = 0;

			while (i < intervals.Length)
			{
				start_times[i] = intervals[i][0];
				i++;
			}

			i = 0;
			while (i < intervals.Length)
			{
				end_times[i] = intervals[i][1];
				i++;
			}

			Array.Sort(start_times);
			Array.Sort(end_times);

			while (start < intervals.Length)
			{
				if (start_times[start] < end_times[end])
				{
					start++;
					count++;
				}
				else
				{
					end++;
					count--;
				}

				result = Math.Max(result, count);
			}

			return result;
		}

		//		// min heap to track min end time of merged intervals
		//		priority_queue<int, vector<int>, greater<int>> pq;
		//		pq.push(intervals[0][1]);

		//        for (int i = 1; i<intervals.size(); i++) {
		//            // compare curr start w/ earliest end time, if no overlap then pop
		//            if (intervals[i][0] >= pq.top()) {
		//                pq.pop();
		//            }
		//	// add new room (will replace/be same size if above was true)
		//	pq.push(intervals[i][1]);
		//        }

		//return pq.size();



	}

	class Program
	{
		static void Main(string[] args)
		{


			Problem prob = new Problem();

			int result = prob.MinMeetingRooms(new int[][] {
				new int[2] { 0, 30 },
				new int[2] { 5, 10 },
				new int[2] { 10, 15 }

			});



			Console.WriteLine("Min meeting rooms:" + result);


		}
	}

}