namespace CodeInterview
{

	//	130. Surrounded Regions
	//Medium

	//5393

	//1293

	//Add to List

	//Share
	//Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.

	//A region is captured by flipping all 'O's into 'X's in that surrounded region.



	//Example 1:


	//Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
	//Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
	//Explanation: Notice that an 'O' should not be flipped if:
	//- It is on the border, or
	//- It is adjacent to an 'O' that should not be flipped.
	//The bottom 'O' is on the border, so it is not flipped.
	//The other three 'O' form a surrounded region, so they are flipped.

	class Problem
	{

		public void Solve(char[][] board)
		{
			int rows = board.Length;
			int cols = board[0].Length;

			for (int i = 0; i < cols; i++)
			{
				if (board[0][i] == 'O') dfs(board, 0, i);
				if (board[rows - 1][i] == 'O') dfs(board, rows - 1, i);

			}

			for (int i = 0; i < rows; i++)
			{
				if (board[i][0] == 'O') dfs(board, i, 0);
				if (board[i][cols - 1] == 'O') dfs(board, i, cols - 1);
			}

			for (int i = 0; i < rows; i++)
				for (int j = 0; j < cols; j++)
				{
					if (board[i][j] == 'O') board[i][j] = 'X';
					if (board[i][j] == 'T') board[i][j] = 'O';

				}
		}

		private void dfs(char[][] board, int i, int j)
		{
			int rows = board.Length;
			int cols = board[0].Length;

			if (i < 0 || i >= rows || j < 0 || j >= cols || board[i][j] != 'O') return;

			board[i][j] = 'T';

			dfs(board, i, j + 1);
			dfs(board, i, j - 1);
			dfs(board, i + 1, j);
			dfs(board, i - 1, j);
		}
	}


	class Program
	{
		static void Main(string[] args)
		{

			Problem problem = new Problem();

			problem.Solve(new char[][] {

				new char[]{'X','X','X','X'},
				new char[]{'X','O','O','X'},
				new char[]{'X','X','O','X'},
				new char[]{'X','O','X','X'}

			}

			   );




		}
	}
}