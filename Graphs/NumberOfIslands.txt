using System;

namespace CodeInterview
{

	//	200. Number of Islands
	//Medium

	//15352

	//362

	//Add to List

	//Share
	//Given an m x n 2D binary grid grid which represents a map of '1's(land) and '0's(water), return the number of islands.

	//An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.




	//Example 1:


	//Input: grid = [

	//["1", "1", "1", "1", "0"],
	//["1","1","0","1","0"],
	//["1","1","0","0","0"],
	//["0","0","0","0","0"]
	//]
	//Output: 1
	class Problem
	{
		public int NumIslands(char[][] grid)
		{
			int rows = grid.Length;
			int cols = grid[0].Length;
			int result = 0;

			for (int i = 0; i < rows; i++)

				for (int j = 0; j < cols; j++)
				{
					if (grid[i][j] == '1')
					{
						dfs(grid, i, j, rows, cols);
						result++;
					}

				}

			return result;
		}
		private void dfs(char[][] grid, int i, int j, int rows, int cols)
		{
			if (i < 0 || i >= rows || j < 0 || j >= cols || grid[i][j] == '0')
			{
				return;
			}

			grid[i][j] = '0';

			dfs(grid, i, j + 1, rows, cols);
			dfs(grid, i, j - 1, rows, cols);
			dfs(grid, i + 1, j, rows, cols);
			dfs(grid, i - 1, j, rows, cols);
		}
	}


	class Program
	{
		static void Main(string[] args)
		{

			Problem problem = new Problem();

			int result = problem.NumIslands(new char[][] {
				new char[] {'1','1','1','1','0'},
				new char[] {'1','1','0','1','0'},
				new char[] {'1','1','0','0','0'},
				new char[] {'0','0','0','0','0'},

			});


			Console.WriteLine("result is:" + result);

		}
	}
}