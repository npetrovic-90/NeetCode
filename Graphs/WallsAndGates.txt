using System;
using System.Collections.Generic;

namespace CodeInterview
{

	//	663 · Walls and Gates
	//Algorithms
	//Medium
	//Accepted Rate
	//54%
	//Description
	//Solution
	//Notes
	//Discuss
	//Leaderboard
	//Description
	//You are given a m x n 2D grid initialized with these three possible values.

	//-1 - A wall or an obstacle.
	//0 - A gate.
	//INF - Infinity means an empty room.We use the value 2^31 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
	//Fill each empty room with the distance to its nearest gate.If it is impossible to reach a Gate, that room should remain filled with INF

	//Contact me on wechat to get Amazon、Google requent Interview questions . (wechat id : jiuzhang0607)


	//Example
	//Example1

	//Input:
	//[[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]]
	//Output:
	//[[3,-1,0,1],[2,2,1,-1],[1,-1,2,-1],[0,-1,3,4]]

	//Explanation:
	//the 2D grid is:
	//INF  -1  0  INF
	//INF INF INF  -1
	//INF  -1 INF  -1
	//  0  -1 INF INF
	//the answer is:
	//  3  -1   0   1
	//  2   2   1  -1
	//  1  -1   2  -1
	//  0  -1   3   4

	class Problem
	{
		int[][] dirs = new int[][]
		{
			new int[]{1,0 },
			new int[]{-1,0 },
			new int[]{0,1 },
			new int[]{0,-1 },
		};
		public int[][] WallsAndGates(int[][] rooms)
		{
			// write your code here

			int rows = rooms.Length;
			int cols = rooms[0].Length;
			int distance = 0;
			Queue<int[]> queue = new Queue<int[]>();

			for (int i = 0; i < rows; i++)
				for (int j = 0; j < rows; j++)
				{
					if (rooms[i][j] == 0) queue.Enqueue(new int[] { i, j });
				}

			if (queue.Count == 0) return new int[][] { };

			while (queue.Count > 0)
			{

				++distance;
				int[] current = queue.Dequeue();
				int i = current[0];
				int j = current[1];

				foreach (int[] dir in dirs)
				{
					int x = i + dir[0];
					int y = j + dir[1];

					if (x >= rows || y >= cols || x < 0 || y < 0 || rooms[x][y] != Int32.MaxValue)
						continue;

					queue.Enqueue(new int[] { x, y });

					rooms[x][y] = rooms[i][j] + 1;
				}

			}

			return rooms;
		}
	}


	class Program
	{
		static void Main(string[] args)
		{

			Problem problem = new Problem();

			int[][] result = problem.WallsAndGates(new int[][] {
			new int[] { 2147483647, -1, 0, 2147483647 },
				new int[] { 2147483647, 2147483647, 2147483647, -1 },
				new int[] { 2147483647, -1, 2147483647, -1 },
				new int[] { 0, -1, 2147483647, 2147483647 }


			});

			foreach (int[] res in result)
			{
				Console.WriteLine("");
				foreach (int num in res)
					Console.Write(num + " ");
			}


		}
	}
}
