using System;
using System.Collections.Generic;

namespace CodeInterview
{

	//	133. Clone Graph
	//Medium

	//6393

	//2699

	//Add to List

	//Share
	//Given a reference of a node in a connected undirected graph.

	//Return a deep copy (clone) of the graph.

	//Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.

	//class Node
	//	{
	//		public int val;
	//		public List<Node> neighbors;
	//	}
	class Node
	{
		public int val;
		public IList<Node> neighbors;

		public Node()
		{
			val = 0;
			neighbors = new List<Node>();
		}
		public Node(int _val)
		{
			val = _val;
			neighbors = new List<Node>();
		}
		public Node(int _val, List<Node> _neighbors)
		{
			val = _val;
			neighbors = _neighbors;
		}
	}
	class Problem
	{

		public Dictionary<int, Node> dict = new Dictionary<int, Node>();
		public Node CloneGraph(Node node)
		{
			if (node == null) return null;

			if (dict.ContainsKey(node.val)) return dict[node.val];

			Node newNode = new Node(node.val, new List<Node>());
			dict.Add(node.val, newNode);

			foreach (Node neighbor in node.neighbors)
				newNode.neighbors.Add(CloneGraph(neighbor));

			return newNode;

		}
	}


	class Program
	{
		static void Main(string[] args)
		{

			Problem problem = new Problem();

			int result = problem.NumIslands(new char[][] {
				new char[] {'1','1','1','1','0'},
				new char[] {'1','1','0','1','0'},
				new char[] {'1','1','0','0','0'},
				new char[] {'0','0','0','0','0'},

			});


			Console.WriteLine("result is:" + result);

		}
	}
}
