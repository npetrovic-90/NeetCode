using System;

namespace CodeInterview
{

	//	695. Max Area of Island
	//Medium

	//7530

	//169

	//Add to List

	//Share
	//You are given an m x n binary matrix grid.An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

	//The area of an island is the number of cells with a value 1 in the island.

	//Return the maximum area of an island in grid.If there is no island, return 0.




	//Example 1:


	//Input: grid = [[0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0,0,0,0,0,0,0,1,1,1,0,0,0], [0,1,1,0,1,0,0,0,0,0,0,0,0], [0,1,0,0,1,1,0,0,1,0,1,0,0], [0,1,0,0,1,1,0,0,1,1,1,0,0], [0,0,0,0,0,0,0,0,0,0,1,0,0], [0,0,0,0,0,0,0,1,1,1,0,0,0], [0,0,0,0,0,0,0,1,1,0,0,0,0]]
	//Output: 6
	//Explanation: The answer is not 11, because the island must be connected 4-directionally.

	class Problem
	{

		public int MaxAreaOfIsland(int[][] grid)
		{
			int rows = grid.Length;
			int cols = grid[0].Length;
			int result = 0;

			for (int i = 0; i < rows; i++)
				for (int j = 0; j < cols; j++)
				{
					if (grid[i][j] == 1)
					{
						result = Math.Max(result, dfs(grid, i, j, rows, cols));
					}
				}

			return result;
		}
		private int dfs(int[][] grid, int i, int j, int rows, int cols)
		{
			if (i < 0 || i >= rows || j < 0 || j >= cols || grid[i][j] == 0)
				return 0;

			grid[i][j] = 0;


			return 1 + dfs(grid, i, j + 1, rows, cols) +
				dfs(grid, i, j - 1, rows, cols) +
				dfs(grid, i + 1, j, rows, cols) +
				dfs(grid, i - 1, j, rows, cols);
		}
	}


	class Program
	{
		static void Main(string[] args)
		{

			Problem problem = new Problem();

			int result = problem.MaxAreaOfIsland(new int[][] {
			new int[]{0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
			new int[]{0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0 },
			new int[]{0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
			new int[]{0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0 },
			new int[]{0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0 },
			new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 },
			new int[]{0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0 },
			new int[]{0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0 }


			}

			);


			Console.WriteLine("result is:" + result);

		}
	}
}