using System;
using System.Collections.Generic;

namespace CodeInterview
{
	//	


	class Problem
	{

	}
	public class Node
	{
		public int value;
		public Node left;
		public Node right;

		public Node(int value)
		{
			this.value = value;
			left = null;
			right = null;
		}
	}

	public class BTree
	{
		private Node root;

		public BTree()
		{
			root = null;
		}

		public Node getRoot()
		{
			return root;
		}
		public void setRoot(Node root)
		{
			this.root = root;
		}

		//binary search tree insert
		public void insert(int value)
		{
			root = insertRec(root, value);
		}

		private Node insertRec(Node root, int value)
		{
			Node curr = root;
			if (curr == null)
			{
				curr = new Node(value);

				return curr;
			}
			else
			{
				if (curr.value >= value)
				{
					curr.left = insertRec(curr.left, value);
				}
				else
				{
					curr.right = insertRec(curr.right, value);
				}
			}

			return curr;
		}

		//inorder traversal

		public void inorder(Node root)
		{
			Node curr = root;

			if (curr != null)
			{
				inorder(curr.left);
				Console.Write(curr.value + " ");
				inorder(curr.right);

			}
		}

		//preorder
		public void preorder(Node root)
		{
			Node curr = root;

			if (curr != null)
			{
				Console.Write(curr.value + " ");
				preorder(curr.left);

				preorder(curr.right);

			}
		}
		//postorder
		public void postorder(Node root)
		{
			Node curr = root;

			if (curr != null)
			{

				postorder(curr.left);

				postorder(curr.right);
				Console.Write(curr.value + " ");

			}
		}
		//		Given the root of a binary tree, return its maximum depth.

		//A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.



		//Example 1:


		//Input: root = [3,9,20,null,null,15,7]
		//		Output: 3
		//height of binary tree

		public int getHeight(Node root)
		{
			Node curr = root;
			if (curr == null) return 0;

			return 1 + Math.Max(getHeight(curr.left), getHeight(curr.right));
		}

		//inorder iterative

		public void inorderIterative(Node root)
		{
			if (root == null) return;

			Node curr = root;

			Stack<Node> stack = new Stack<Node>();

			while (curr != null || stack.Count > 0)
			{
				while (curr != null)
				{
					stack.Push(curr);
					curr = curr.left;
				}

				curr = stack.Pop();
				Console.Write(curr.value + " ");

				curr = curr.right;
			}
		}

		//count nodes in bstree or normal binary tree

		public int countNodes(Node root, int i = 0)
		{
			if (root == null) return i;
			i++;
			i = countNodes(root.left, i);
			i = countNodes(root.right, i);

			return i;
		}

		public int findMaximum(Node root, int max)
		{

			if (root == null) return max;

			if (root.value > max) max = root.value;

			max = findMaximum(root.left, max);
			max = findMaximum(root.right, max);

			return max;
		}


		//		given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.



		//Example 1:


		//Input: root = [1,2,3,null,5,null,4]
		//		Output: [1,3,4]
		//		Example 2:

		//Input: root = [1,null,3]
		//		Output: [1,3]
		//solution
		// do level order traversal then return last element of each list

		public List<int> LevelOrder(Node root)
		{
			List<int> result = new List<int>();

			Queue<Node> queue = new Queue<Node>();

			if (root != null)
				queue.Enqueue(root);

			while (queue.Count > 0)
			{
				List<int> values = new List<int>();
				int range = queue.Count;

				for (int i = 0; i < range; i++)
				{
					Node tmp = queue.Dequeue();

					values.Add(tmp.value);
					if (tmp.left != null) queue.Enqueue(tmp.left);
					if (tmp.right != null) queue.Enqueue(tmp.right);

				}

				result.Add(values[values.Count - 1]);


			}

			return result;

		}

	}

	class Program
	{
		static void Main(string[] args)
		{

			BTree bTree = new BTree();
			BTree bTree2 = new BTree();

			//bTree.setRoot(new Node(1));
			//bTree.getRoot().left = new Node(41);
			//bTree.getRoot().right = new Node(21);
			//bTree.getRoot().left.left = new Node(422);
			//bTree.getRoot().left.right = new Node(131);
			//bTree.getRoot().right.left = new Node(81);
			//bTree.getRoot().right.right = new Node(67);

			bTree.insert(10);
			bTree.insert(5);
			bTree.insert(15);
			bTree.insert(3);
			bTree.insert(6);
			bTree.insert(20);
			bTree.insert(13);
			bTree.insert(-10);


			bTree.inorder(bTree.getRoot());
			Console.WriteLine();

			List<int> result = bTree.LevelOrder(bTree.getRoot());

			Console.Write("[");
			foreach (int tmp in result)
			{
				Console.Write(tmp + ",");

			}
			Console.Write("]");
			Console.WriteLine();

		}
	}
}