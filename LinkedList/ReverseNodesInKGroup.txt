using System;
using System.Collections.Generic;

namespace CodeInterview
{
	//	Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

	//k is a positive integer and is less than or equal to the length of the linked list.If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

	//You may not alter the values in the list's nodes, only nodes themselves may be changed.



	//Example 1:


	//Input: head = [1,2,3,4,5], k = 2
	//Output: [2,1,4,3,5]


	class Problem
	{
	}
	class Node
	{
		public int data;
		public Node next;

		public Node()
		{

		}

		public Node(int data)
		{
			this.data = data;
		}
	}


	class CustomList
	{
		private Node head;

		public CustomList()
		{
			head = null;
		}

		public void setHead(Node newHead)
		{
			this.head = newHead;
		}

		public Node getHead()
		{
			return head;
		}

		//add as ffirst element
		public void addFirst(int data)
		{
			Node toAdd = new Node();

			//set
			toAdd.data = data;
			toAdd.next = head;

			//new head;

			head = toAdd;
		}

		//add as last element
		public void addLast(int data)
		{
			if (head == null)
			{
				head = new Node();

				head.data = data;
				head.next = null;


			}

			else
			{

				Node current = head;

				while (current.next != null)
					current = current.next;

				Node toAdd = new Node();

				toAdd.data = data;
				toAdd.next = null;

				current.next = toAdd;



			}
		}

		//print elements of the list

		public void print()
		{
			Node current = head;

			while (current != null)
			{

				Console.Write(current.data + " -> ");


				current = current.next;
			}
			Console.Write("null");
			Console.WriteLine();
		}

		public void reverse()
		{
			Node current = head;
			Node previous = null;
			Node nextElement = null;

			while (current != null)
			{
				nextElement = current.next;
				current.next = previous;
				previous = current;
				current = nextElement;

			}

			head = previous;

		}

		public Node reverseRecursive(Node head)
		{
			Node current = head;

			if (head == null) return null;

			if (head.next != null)
			{
				current = reverseRecursive(head.next);
				head.next.next = head;
			}
			head.next = null;

			return current;
		}

		public void Swap()
		{
			Node current = head;

			while (current != null && current.next != null)
			{
				int tmp = current.data;
				current.data = current.next.data;
				current.next.data = tmp;


				current = current.next.next;
			}
		}

		public Node MergeTwoLists(Node list1, Node list2)
		{
			Node newListHead = new Node();

			Node current = newListHead;

			while (list1 != null && list2 != null)
			{
				if (list1.data < list2.data)
				{
					current.next = list1;
					list1 = list1.next;
				}
				else
				{
					current.next = list2;
					list2 = list2.next;
				}

				current = current.next;
			}

			while (list1 != null)
			{
				current.next = list1;
				list1 = list1.next;

				current = current.next;
			}
			while (list2 != null)
			{
				current.next = list2;
				list2 = list2.next;

				current = current.next;
			}


			return newListHead.next;


		}

		public Node ReorderList()
		{
			if (head == null) return null;

			Node head2 = Split(head);
			head2 = Reverse(head2);

			return Merge(head, head2);
		}

		public Node Split(Node head)
		{
			Node slow = head;
			Node fast = head.next;

			while (fast != null && fast.next != null)
			{
				slow = slow.next;
				fast = fast.next.next;
			}

			Node head2 = slow.next;
			slow.next = null;

			return head2;

		}
		public Node Reverse(Node head)
		{
			Node current = head;
			Node previous = null;

			while (current != null)
			{
				Node next = current.next;
				current.next = previous;
				previous = current;
				current = next;
			}

			return previous;
		}

		public Node Merge(Node head1, Node head2)
		{
			Node current1 = head1;
			Node current2 = head2;

			while (current1 != null && current2 != null)
			{
				Node next1 = current1.next;
				Node next2 = current2.next;

				current1.next = current2;
				current2.next = next1;

				current1 = next1;
				current2 = next2;

			}
			return head1;
		}

		public void RemoveNthFromEnd(int n)
		{
			Node current = head;
			int len = 0;

			while (current != null)
			{
				len++;
				current = current.next;
			}

			if (n > len)
			{
				Console.WriteLine("\nElement can not be removed");
				return;
			}
			else if (len == n)
			{
				head = head.next;
				return;
			}
			else
			{
				int diff = len - n;

				Node previous = null;
				current = head;
				for (int i = 0; i < diff; i++)
				{
					previous = current;
					current = current.next;
				}

				previous.next = current.next;

			}
		}

		public Node AddTwoNumbers(Node list1, Node list2)
		{
			Node dummy = new Node();
			Node current = dummy;

			int carry = 0;
			int value1 = 0;
			int value2 = 0;

			while (list1 != null || list2 != null || carry != 0)
			{
				if (list1 != null) value1 = list1.data;

				if (list2 != null) value2 = list2.data;

				int result = value1 + value2 + carry;

				carry = result / 10;
				result = result % 10;

				current.next = new Node(result);


				current = current.next;

				if (list1 != null) list1 = list1.next;

				if (list2 != null) list2 = list2.next;
			}

			return dummy.next;
		}

		public bool LinkedListCycle(Node list)
		{
			Node slow = list;
			Node fast = list;


			while (fast != null && fast.next != null)
			{
				slow = slow.next;
				fast = fast.next.next;

				if (slow == fast) return true;
			}



			return false;
		}

		public void OddEvenList()
		{

			Node odd = head;
			Node even = head.next;

			Node current = head.next;

			while (even != null && even.next != null)
			{
				odd.next = even.next;
				odd = odd.next;
				even.next = odd.next;

				even = even.next;

			}

			odd.next = current;

		}

		public Node MergeKLists(Node[] lists)
		{

			if (lists.Length == 1)
			{
				return lists[0];

			}
			if (lists.Length == 0) return null;

			List<Node> list = new List<Node>();

			for (int i = 0; i < lists.Length; i++)
				list.Add(lists[i]);


			while (list.Count > 1)
			{

				for (int i = 0; i < list.Count; i = i + 2)
				{
					Node list1 = list[i];
					Node list2;
					if (i + 1 < list.Count) list2 = list[i + 1];
					else list2 = null;

					list.Remove(list1);
					list.Remove(list2);
					list.Add(merge(list1, list2));



				}

			}


			return list[0];

		}

		public Node merge(Node list1, Node list2)
		{
			if (list1 == null) return list2;
			if (list2 == null) return list1;

			if (list1.data < list2.data)
			{
				list1.next = merge(list1.next, list2);
				return list1;
			}
			else
			{
				list2.next = merge(list1, list2.next);

				return list2;
			}
		}

		public Node ReverseKGroup(Node head, int k)
		{
			if (head == null || k <= 1) return head;
			Node current = head;
			int length = 0;

			while (current != null)
			{
				length++;
				current = current.next;
			}


			Node previous = null;

			Node nextElement = null;
			current = head;
			while (length >= k && current != null)
			{
				Node lastNodeOfFirstPart = previous;
				Node lastNodeOfTheSubList = current;


				int i = 0;
				while (current != null && i < k)
				{
					nextElement = current.next;
					current.next = previous;
					previous = current;
					current = nextElement;

					i++;
				}
				Console.WriteLine("last node of sublist:" + lastNodeOfTheSubList.data);
				Console.WriteLine("current:" + current.data);
				Console.WriteLine("previous:" + previous.data);
				if (lastNodeOfFirstPart != null) Console.WriteLine("last node of the first part:" + lastNodeOfFirstPart.data);
				else Console.WriteLine("last node of the first part:null");
				if (lastNodeOfFirstPart != null)
				{
					Console.WriteLine("in if:" + lastNodeOfFirstPart.data);
					lastNodeOfFirstPart.next = previous;
				}
				else
				{
					head = previous;
				}

				length = length - k;

				if (lastNodeOfTheSubList != null)
				{
					lastNodeOfTheSubList.next = current;

				}

				previous = lastNodeOfTheSubList;
			}


			return head;
		}

	}

	class Program
	{
		static void Main(string[] args)
		{

			CustomList list1 = new CustomList();




			list1.addFirst(5);
			list1.addFirst(4);
			list1.addFirst(3);
			list1.addFirst(2);
			list1.addFirst(1);

			list1.print();
			list1.setHead(list1.ReverseKGroup(list1.getHead(), 2));
			list1.print();








		}
	}
}