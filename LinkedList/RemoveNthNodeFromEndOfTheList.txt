using System;

namespace CodeInterview
{

	////	Given the head of a linked list, remove the nth node from the end of the list and return its head.



	////Example 1:


	////Input: head = [1, 2, 3, 4, 5], n = 2
	////Output: [1,2,3,5]


	class Problem
	{
	}
	class Node
	{
		public int data;
		public Node next;

		public Node()
		{

		}
	}

	class CustomList
	{
		private Node head;

		public CustomList()
		{
			head = null;
		}

		public void setHead(Node newHead)
		{
			this.head = newHead;
		}

		public Node getHead()
		{
			return head;
		}

		//add as ffirst element
		public void addFirst(int data)
		{
			Node toAdd = new Node();

			//set
			toAdd.data = data;
			toAdd.next = head;

			//new head;

			head = toAdd;
		}

		//add as last element
		public void addLast(int data)
		{
			if (head == null)
			{
				head = new Node();

				head.data = data;
				head.next = null;


			}

			else
			{

				Node current = head;

				while (current.next != null)
					current = current.next;

				Node toAdd = new Node();

				toAdd.data = data;
				toAdd.next = null;

				current.next = toAdd;



			}
		}

		//print elements of the list

		public void print()
		{
			Node current = head;

			while (current != null)
			{

				Console.Write(current.data + " -> ");


				current = current.next;
			}
			Console.Write("null");
			Console.WriteLine();
		}

		public void reverse()
		{
			Node current = head;
			Node previous = null;
			Node nextElement = null;

			while (current != null)
			{
				nextElement = current.next;
				current.next = previous;
				previous = current;
				current = nextElement;

			}

			head = previous;

		}

		public Node reverseRecursive(Node head)
		{
			Node current = head;

			if (head == null) return null;

			if (head.next != null)
			{
				current = reverseRecursive(head.next);
				head.next.next = head;
			}
			head.next = null;

			return current;
		}

		public void Swap()
		{
			Node current = head;

			while (current != null && current.next != null)
			{
				int tmp = current.data;
				current.data = current.next.data;
				current.next.data = tmp;


				current = current.next.next;
			}
		}

		public Node MergeTwoLists(Node list1, Node list2)
		{
			Node newListHead = new Node();

			Node current = newListHead;

			while (list1 != null && list2 != null)
			{
				if (list1.data < list2.data)
				{
					current.next = list1;
					list1 = list1.next;
				}
				else
				{
					current.next = list2;
					list2 = list2.next;
				}

				current = current.next;
			}

			while (list1 != null)
			{
				current.next = list1;
				list1 = list1.next;

				current = current.next;
			}
			while (list2 != null)
			{
				current.next = list2;
				list2 = list2.next;

				current = current.next;
			}


			return newListHead.next;


		}

		public Node ReorderList()
		{
			if (head == null) return null;

			Node head2 = Split(head);
			head2 = Reverse(head2);

			return Merge(head, head2);
		}

		public Node Split(Node head)
		{
			Node slow = head;
			Node fast = head.next;

			while (fast != null && fast.next != null)
			{
				slow = slow.next;
				fast = fast.next.next;
			}

			Node head2 = slow.next;
			slow.next = null;

			return head2;

		}
		public Node Reverse(Node head)
		{
			Node current = head;
			Node previous = null;

			while (current != null)
			{
				Node next = current.next;
				current.next = previous;
				previous = current;
				current = next;
			}

			return previous;
		}

		public Node Merge(Node head1, Node head2)
		{
			Node current1 = head1;
			Node current2 = head2;

			while (current1 != null && current2 != null)
			{
				Node next1 = current1.next;
				Node next2 = current2.next;

				current1.next = current2;
				current2.next = next1;

				current1 = next1;
				current2 = next2;

			}
			return head1;
		}

		public void RemoveNthFromEnd(int n)
		{
			Node current = head;
			int len = 0;

			while (current != null)
			{ len++; current = current.next; }

			if (n > len)
			{
				Console.WriteLine("\nElement can not be removed");
				return;
			}
			else if (len == n)
			{
				head = head.next;
				return;
			}
			else
			{
				int diff = len - n;

				Node previous = null;
				current = head;
				for (int i = 0; i < diff; i++)
				{
					previous = current;
					current = current.next;
				}

				previous.next = current.next;

			}
		}

	}

	class Program
	{
		static void Main(string[] args)
		{



			CustomList list2 = new CustomList();

			list2.addFirst(4);
			list2.addFirst(3);
			list2.addFirst(2);
			list2.addFirst(1);
			list2.addFirst(0);

			list2.print();

			list2.RemoveNthFromEnd(2);
			list2.print();









			Console.WriteLine();



		}
	}
}