using System;
using System.Collections.Generic;

namespace CodeInterview
{

	//	You are given a string s and an integer k.You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

	//Return the length of the longest substring containing the same letter you can get after performing the above operations.



	//Example 1:

	//Input: s = "ABAB", k = 2
	//Output: 4
	//Explanation: Replace the two 'A's with two 'B's or vice versa.
	//Example 2:

	//Input: s = "AABABBA", k = 1
	//Output: 4
	//Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".
	//The substring "BBBB" has the longest repeating letters, which is 4.
	class Problem
	{


		//Solution
		//iterate through string and add characters to hashmap and count them, them moment we add them
		// at the same moment we update our maximum, previous maximum with newly added character





		public int findLongestSubStringLength(String str, int k)
		{
			Dictionary<char, int> dict = new Dictionary<char, int>();

			int result = 0;
			int left = 0;

			int maximumFrequency = 0;

			for (int right = 0; right < str.Length - 1; right++)
			{
				if (dict.ContainsKey(str[right])) dict[str[right]]++;
				else dict.Add(str[right], 1);

				maximumFrequency = Math.Max(maximumFrequency, dict[str[right]]);

				if ((right - left + 1) - maximumFrequency > k)
				{

					dict[str[left]]--;
					left++;
				}

				result = Math.Max(result, right - left + 1);
			}

			return result;
		}





	}


	class Program
	{
		static void Main(string[] args)
		{



			Problem problem = new Problem();

			Console.WriteLine(problem.findLongestSubStringLength("ABABBA", 2));



		}
	}
}