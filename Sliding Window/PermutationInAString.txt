using System;
using System.Collections.Generic;

namespace CodeInterview
{

	//	Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

	//In other words, return true if one of s1's permutations is the substring of s2.



	//Example 1:

	//Input: s1 = "ab", s2 = "eidbaooo"
	//Output: true
	//Explanation: s2 contains one permutation of s1("ba").
	class Problem
	{


		//Solution
		//go through a pattern and add all characters to a hashmap, define matched variable.
		// iterate through a str and whenever a character from a string is found in hashmap  that contains pattern characters
		// reduce is frequency by 1, if it reaches zero increase matched by 1.
		// at any moment if matched is equal to hashmap size, return true.
		//if windowEnd iterator becomes bigger than pattern size-1. compare windowstart character
		//because we reduced the number of characters at some point, if it existed in hashmap, we need to increment frequency by 1
		// and if frequency of the character ever reached 0 we reduced matched by 1.





		public bool findPermutation(String str, String pattern)
		{
			Dictionary<char, int> dict = new Dictionary<char, int>();

			for (int i = 0; i < pattern.Length - 1; i++)
			{
				if (dict.ContainsKey(pattern[i])) dict[pattern[i]]++;

				else dict.Add(pattern[i], 1);
			}

			int windowStart = 0;
			int matched = 0;

			for (int windowEnd = 0; windowEnd < str.Length - 1; windowEnd++)
			{
				char end = str[windowEnd];

				if (dict.ContainsKey(end))
				{
					dict[end]--;
					if (dict[end] == 0) matched++;
				}

				if (matched == dict.Count) return true;

				if (windowEnd >= pattern.Length - 1)
				{
					char start = str[windowStart];
					windowStart++;
					if (dict.ContainsKey(start))
					{
						if (dict[start] == 0) matched--;
					}
					dict[start]++;


				}
			}

			return false;

		}





	}


	class Program
	{
		static void Main(string[] args)
		{



			Problem problem = new Problem();

			Console.WriteLine(problem.findPermutation("baxyzabc", "abc"));



		}
	}
}