using System;
using System.Collections.Generic;

namespace CodeInterview
{

	//	Given a string s, find the length of the longest substring without repeating characters.



	//Example 1:

	//Input: s = "abcabcbb"
	//Output: 3
	//Explanation: The answer is "abc", with the length of 3.
	//Example 2:

	//Input: s = "bbbbb"
	//Output: 1
	//Explanation: The answer is "b", with the length of 1.
	class Problem
	{


		//Solution
		//2 pointers both start at the beginning of the string
		//iterate and add elements to hashset if they already do not exist in hashset and increment right by 1
		//if they do exist remove them from hashset, using left pointer, and increment left by one
		//longest substring will be maximum between longest and right-left




		public int LengthOfLongestSubstring(string s)
		{

			int left = 0, right = 0;
			int longest = 0;
			int n = s.Length;

			HashSet<Char> window = new HashSet<char>();

			while (right < n)
			{
				if (!window.Contains(s[right]))
				{

					window.Add(s[right]);
					right++;
				}
				else
				{
					window.Remove(s[left]);
					left++;
				}
				longest = Math.Max(longest, right - left);
			}

			return longest;
		}





	}


	class Program
	{
		static void Main(string[] args)
		{



			Problem problem = new Problem();

			Console.WriteLine(problem.LengthOfLongestSubstring("abcabcabb"));



		}
	}
}